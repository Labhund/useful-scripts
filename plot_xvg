#!/usr/bin/env python3

import matplotlib.pyplot as plt
import numpy as np

def plot_xvg(filename):
    """Plots a .xvg file created by GROMACS

    Usage plot_xvg filename.xvg
    """
    header = []
    data = []
    legend_entries = {}

    #Read data, skipping comment lines
    with open(filename, 'r') as f:
        for line in f:
            if line.startswith('#'):
                continue
            elif line.startswith('@'):
                header.append(line.strip())
            else:
                #Parse data lines
                try:
                    data.append([float(x) for x in line.split()])
                except ValueError:
                    continue
    #Defaults
    title = 'XVG Plot'
    xlabel = 'X'
    ylabel = 'Y'
    show_legend = True

    #Extract header info
    for line in header:
        if '@' and 'title' in line:
            title = line.split("\"")[1] if "\"" in line else line.split()[-1]
        if '@' and 'xaxis' and 'label' in line:
            xlabel = line.split("\"")[1] if "\"" in line else line.split()[-1]
        if '@' and 'yaxis' and 'label' in line:
            ylabel = line.split("\"")[1] if "\"" in line else line.split()[-1]
        #Check if legend is off
        if '@' and 'legend' and 'off' in line:
            show_legend = False
        #Get legend 
        if '@' and 'legend' in line and line.strip().startswith('@ s') and show_legend:
            parts = line.strip().split()
            if len(parts) >= 4 and parts[0] == '@' and parts[2] == 'legend':
                index = int(parts[1][1:])
                legend_entries[index] = ' '.join(parts[3:])	
                
    #Convert data to numpy array	
    data = np.array(data)	
    
    #Check if we have data	
    if len(data) == 0:
        print("No data found in the file")
        return

    plt.figure(figsize=(10,6))
    plt.grid(True, linestyle='--', alpha=0.5)
    x = data[:,0]
    # Plot each column as a separate line
    for i in range(1, data.shape[1]):
        # Get the legend label for this series if available
        label = legend_entries.get(i-1, f"Dataset {i}")
        plt.plot(x, data[:, i], label=label)

    #Set title and axis labels
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)

    #Add legend if needed and if we have legend entries
    if show_legend and data.shape[1] > 1:
        plt.legend()

    #Make the layout tight
    plt.tight_layout()

    #Display the plot
    plt.show()

# Make the script executable from command line
if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("Usage: plot_xvg filename.xvg")
        sys.exit(1)
    plot_xvg(sys.argv[1])

